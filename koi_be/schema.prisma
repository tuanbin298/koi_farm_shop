// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "sqlite"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String     @id @default(cuid())
  name               String     @default("")
  email              String     @unique @default("")
  password           String
  phone              String     @default("")
  address            String     @default("")
  role               Role?      @relation("User_role", fields: [roleId], references: [id])
  roleId             String?    @map("role")
  from_Feedback_user Feedback[] @relation("Feedback_user")
  from_Order_user    Order[]    @relation("Order_user")
  from_Cart_user     Cart[]     @relation("Cart_user")

  @@index([roleId])
}

model Role {
  id                  String  @id @default(cuid())
  name                String  @default("")
  canManageUser       Boolean @default(false)
  canManageProduct    Boolean @default(false)
  canManageRole       Boolean @default(false)
  canManageArticle    Boolean @default(false)
  canManageOrder      Boolean @default(false)
  canManageFeedback   Boolean @default(false)
  canManageCart       Boolean @default(false)
  canManageConsigment Boolean @default(false)
  user                User[]  @relation("User_role")
}

model Product {
  id                     String      @id @default(cuid())
  name                   String      @default("")
  birth                  Int
  sex                    String?     @default("Sex")
  size                   String?     @default("Size")
  price                  Int
  description            String      @default("")
  origin                 String      @default("")
  generic                String      @default("")
  image                  String?
  category               Category?   @relation("Product_category", fields: [categoryId], references: [id])
  categoryId             String?     @map("category")
  from_Feedback_product  Feedback[]  @relation("Feedback_product")
  from_OrderItem_product OrderItem[] @relation("OrderItem_product")
  from_CartItem_product  CartItem[]  @relation("CartItem_product")

  @@index([categoryId])
}

model Category {
  id                    String    @id @default(cuid())
  name                  String    @default("")
  description           String    @default("")
  from_Product_category Product[] @relation("Product_category")
}

model Article {
  id      String  @id @default(cuid())
  name    String  @default("")
  content String  @default("")
  link    String  @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  image   String?
}

model Feedback {
  id        String    @id @default(cuid())
  user      User?     @relation("Feedback_user", fields: [userId], references: [id])
  userId    String?   @map("user")
  product   Product?  @relation("Feedback_product", fields: [productId], references: [id])
  productId String?   @map("product")
  comment   String    @default("")
  createdAt DateTime? @default(now())

  @@index([userId])
  @@index([productId])
}

model Order {
  id                   String      @id @default(cuid())
  user                 User?       @relation("Order_user", fields: [userId], references: [id])
  userId               String?     @map("user")
  items                OrderItem[] @relation("Order_items")
  price                Int?
  createAt             DateTime?   @default(now())
  address              String      @default("")
  status               String?     @default("Chờ xác nhận")
  from_OrderItem_order OrderItem[] @relation("OrderItem_order")

  @@index([userId])
}

model OrderItem {
  id               String   @id @default(cuid())
  order            Order?   @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId          String?  @map("order")
  product          Product? @relation("OrderItem_product", fields: [productId], references: [id])
  productId        String?  @map("product")
  quantity         Int
  price            Int
  isStored         Boolean  @default(false)
  from_Order_items Order[]  @relation("Order_items")

  @@index([orderId])
  @@index([productId])
}

model Cart {
  id                 String     @id @default(cuid())
  user               User?      @relation("Cart_user", fields: [userId], references: [id])
  userId             String?    @map("user")
  items              CartItem?  @relation("Cart_items", fields: [itemsId], references: [id])
  itemsId            String?    @map("items")
  price              Int?
  createAt           DateTime?  @default(now())
  from_CartItem_cart CartItem[] @relation("CartItem_cart")

  @@index([userId])
  @@index([itemsId])
}

model CartItem {
  id              String    @id @default(cuid())
  cart            Cart?     @relation("CartItem_cart", fields: [cartId], references: [id])
  cartId          String?   @map("cart")
  product         Product[] @relation("CartItem_product")
  price           Int?
  from_Cart_items Cart[]    @relation("Cart_items")

  @@index([cartId])
}

model ConsigmentRaising {
  id String @id @default(cuid())
}

model ConsignmentSale {
  id          String  @id @default(cuid())
  name        String  @default("")
  birth       Int
  sex         String? @default("Sex")
  medical     String  @default("")
  size        Int
  price       Int
  description String  @default("")
  origin      String  @default("")
  generic     String  @default("")
  image       String?
  category    String  @default("")
  status      String? @default("Còn hàng")
}
