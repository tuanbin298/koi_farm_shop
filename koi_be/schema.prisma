// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                          String              @id @default(cuid())
  name                        String              @default("")
  email                       String              @unique @default("")
  password                    String
  phone                       String              @default("")
  address                     String              @default("")
  role                        Role?               @relation("User_role", fields: [roleId], references: [id])
  roleId                      String?             @map("role")
  cart                        CartItem[]          @relation("CartItem_user")
  from_Feedback_user          Feedback[]          @relation("Feedback_user")
  from_Order_user             Order[]             @relation("Order_user")
  from_ConsigmentRaising_user ConsigmentRaising[] @relation("ConsigmentRaising_user")
  from_Request_user           Request[]           @relation("Request_user")
  from_Request_staff          Request[]           @relation("Request_staff")
  from_Status_changedBy       Status[]            @relation("Status_changedBy")

  @@index([roleId])
}

model Role {
  id                   String  @id @default(cuid())
  name                 String  @default("")
  canManageUser        Boolean @default(false)
  canManageProduct     Boolean @default(false)
  canManageRole        Boolean @default(false)
  canManageArticle     Boolean @default(false)
  canManageOrder       Boolean @default(false)
  canManageFeedback    Boolean @default(false)
  canManageCart        Boolean @default(false)
  canManageConsignment Boolean @default(false)
  canManageRequest     Boolean @default(false)
  canManageStatus      Boolean @default(false)
  canManageGallery     Boolean @default(false)
  user                 User[]  @relation("User_role")
}

model Product {
  id                             String              @id @default(cuid())
  name                           String              @unique @default("")
  birth                          Int
  sex                            String?             @default("Sex")
  size                           String?             @default("Size")
  price                          Int
  description                    String              @default("")
  origin                         String              @default("")
  generic                        String              @default("")
  slug                           String              @unique @default("")
  image                          Json?
  category                       Category?           @relation("Product_category", fields: [categoryId], references: [id])
  categoryId                     String?             @map("category")
  status                         String?
  from_OrderItem_product         OrderItem[]         @relation("OrderItem_product")
  from_CartItem_product          CartItem[]          @relation("CartItem_product")
  from_ConsigmentRaising_product ConsigmentRaising[] @relation("ConsigmentRaising_product")

  @@index([categoryId])
}

model Category {
  id                    String    @id @default(cuid())
  name                  String    @default("")
  description           String    @default("")
  from_Product_category Product[] @relation("Product_category")
}

model Article {
  id      String @id @default(cuid())
  name    String @default("")
  content String @default("")
  link    Json   @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  image   Json?
}

model Feedback {
  id        String    @id @default(cuid())
  user      User?     @relation("Feedback_user", fields: [userId], references: [id])
  userId    String?   @map("user")
  comment   String    @default("")
  createdAt DateTime? @default(now())
  rating    Int?

  @@index([userId])
}

model Order {
  id                   String      @id @default(cuid())
  user                 User?       @relation("Order_user", fields: [userId], references: [id])
  userId               String?     @map("user")
  items                OrderItem[] @relation("Order_items")
  price                Int?
  createAt             DateTime?   @default(now())
  address              String      @default("")
  transaction          String      @default("")
  paymentMethod        String?
  status               String?     @default("Chờ xác nhận")
  statusHistory        Status[]    @relation("Status_order")
  from_OrderItem_order OrderItem[] @relation("OrderItem_order")

  @@index([userId])
}

model OrderItem {
  id                   String             @id @default(cuid())
  order                Order?             @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId              String?            @map("order")
  product              Product?           @relation("OrderItem_product", fields: [productId], references: [id])
  productId            String?            @map("product")
  consignmentSale      ConsignmentSale?   @relation("OrderItem_consignmentSale", fields: [consignmentSaleId], references: [id])
  consignmentSaleId    String?            @map("consignmentSale")
  consignmentRaising   ConsigmentRaising? @relation("OrderItem_consignmentRaising", fields: [consignmentRaisingId], references: [id])
  consignmentRaisingId String?            @map("consignmentRaising")
  price                Int
  status               String?
  isStored             Boolean            @default(false)
  from_Order_items     Order[]            @relation("Order_items")

  @@index([orderId])
  @@index([productId])
  @@index([consignmentSaleId])
  @@index([consignmentRaisingId])
}

model CartItem {
  id                 String            @id @default(cuid())
  user               User?             @relation("CartItem_user", fields: [userId], references: [id])
  userId             String?           @map("user")
  quantity           Int               @default(1)
  product            Product[]         @relation("CartItem_product")
  consignmentProduct ConsignmentSale[] @relation("CartItem_consignmentProduct")
  isStored           Boolean           @default(false)

  @@index([userId])
}

model ConsigmentRaising {
  id                                String      @id @default(cuid())
  user                              User?       @relation("ConsigmentRaising_user", fields: [userId], references: [id])
  userId                            String?     @map("user")
  product                           Product?    @relation("ConsigmentRaising_product", fields: [productId], references: [id])
  productId                         String?     @map("product")
  consignmentDate                   DateTime    @default(now())
  returnDate                        DateTime?
  consignmentPrice                  Float
  status                            String?
  description                       String      @default("")
  from_OrderItem_consignmentRaising OrderItem[] @relation("OrderItem_consignmentRaising")

  @@index([userId])
  @@index([productId])
}

model ConsignmentSale {
  id                               String      @id @default(cuid())
  name                             String      @default("")
  birth                            Int
  sex                              String      @default("")
  medical                          String      @default("")
  size                             Int
  price                            Int?
  description                      String      @default("")
  generic                          String      @default("")
  photo                            Gallery?    @relation("ConsignmentSale_photo", fields: [photoId], references: [id])
  photoId                          String?     @unique @map("photo")
  category                         String      @default("")
  estimatedPrice                   String      @default("")
  slug                             String      @default("")
  request                          Request?    @relation("ConsignmentSale_request", fields: [requestId], references: [id])
  requestId                        String?     @unique @map("request")
  status                           String?     @default("Không có sẵn")
  from_OrderItem_consignmentSale   OrderItem[] @relation("OrderItem_consignmentSale")
  from_CartItem_consignmentProduct CartItem[]  @relation("CartItem_consignmentProduct")
}

model Request {
  id            String           @id @default(cuid())
  user          User?            @relation("Request_user", fields: [userId], references: [id])
  userId        String?          @map("user")
  staff         User?            @relation("Request_staff", fields: [staffId], references: [id])
  staffId       String?          @map("staff")
  description   String           @default("")
  consignment   ConsignmentSale? @relation("ConsignmentSale_request")
  status        String?          @default("Chờ phê duyệt")
  statusHistory Status[]         @relation("Status_request")
  createAt      DateTime?        @default(now())

  @@index([userId])
  @@index([staffId])
}

model Gallery {
  id      String           @id @default(cuid())
  title   String           @default("Hình ảnh")
  image   Json?
  product ConsignmentSale? @relation("ConsignmentSale_photo")
}

model Status {
  id          String    @id @default(cuid())
  status      String    @default("")
  changeTime  DateTime? @default(now())
  changedBy   User?     @relation("Status_changedBy", fields: [changedById], references: [id])
  changedById String?   @map("changedBy")
  request     Request?  @relation("Status_request", fields: [requestId], references: [id])
  requestId   String?   @map("request")
  order       Order?    @relation("Status_order", fields: [orderId], references: [id])
  orderId     String?   @map("order")

  @@index([changedById])
  @@index([requestId])
  @@index([orderId])
}
