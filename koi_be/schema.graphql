# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  phone: String
  address: String
  role: Role
  cart: CartItem
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  phone: StringFilter
  address: StringFilter
  role: RoleWhereInput
  cart: CartItemWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  address: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  phone: String
  address: String
  role: RoleRelateToOneForUpdateInput
  cart: CartItemRelateToOneForUpdateInput
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input CartItemRelateToOneForUpdateInput {
  create: CartItemCreateInput
  connect: CartItemWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  phone: String
  address: String
  role: RoleRelateToOneForCreateInput
  cart: CartItemRelateToOneForCreateInput
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

input CartItemRelateToOneForCreateInput {
  create: CartItemCreateInput
  connect: CartItemWhereUniqueInput
}

type Role {
  id: ID!
  name: String
  canManageUser: Boolean
  canManageProduct: Boolean
  canManageRole: Boolean
  canManageArticle: Boolean
  canManageOrder: Boolean
  canManageFeedback: Boolean
  canManageCart: Boolean
  canManageConsigment: Boolean
  canManageRequest: Boolean
  user(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  userCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canManageUser: BooleanFilter
  canManageProduct: BooleanFilter
  canManageRole: BooleanFilter
  canManageArticle: BooleanFilter
  canManageOrder: BooleanFilter
  canManageFeedback: BooleanFilter
  canManageCart: BooleanFilter
  canManageConsigment: BooleanFilter
  canManageRequest: BooleanFilter
  user: UserManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageUser: OrderDirection
  canManageProduct: OrderDirection
  canManageRole: OrderDirection
  canManageArticle: OrderDirection
  canManageOrder: OrderDirection
  canManageFeedback: OrderDirection
  canManageCart: OrderDirection
  canManageConsigment: OrderDirection
  canManageRequest: OrderDirection
}

input RoleUpdateInput {
  name: String
  canManageUser: Boolean
  canManageProduct: Boolean
  canManageRole: Boolean
  canManageArticle: Boolean
  canManageOrder: Boolean
  canManageFeedback: Boolean
  canManageCart: Boolean
  canManageConsigment: Boolean
  canManageRequest: Boolean
  user: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canManageUser: Boolean
  canManageProduct: Boolean
  canManageRole: Boolean
  canManageArticle: Boolean
  canManageOrder: Boolean
  canManageFeedback: Boolean
  canManageCart: Boolean
  canManageConsigment: Boolean
  canManageRequest: Boolean
  user: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Product {
  id: ID!
  name: String
  birth: Int
  sex: String
  size: String
  price: Int
  description: String
  origin: String
  generic: String
  image: CloudinaryImage_File
  category: Category
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  birth: IntFilter
  sex: StringNullableFilter
  size: StringNullableFilter
  price: IntFilter
  description: StringFilter
  origin: StringFilter
  generic: StringFilter
  category: CategoryWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  birth: OrderDirection
  sex: OrderDirection
  size: OrderDirection
  price: OrderDirection
  description: OrderDirection
  origin: OrderDirection
  generic: OrderDirection
}

input ProductUpdateInput {
  name: String
  birth: Int
  sex: String
  size: String
  price: Int
  description: String
  origin: String
  generic: String
  image: Upload
  category: CategoryRelateToOneForUpdateInput
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  birth: Int
  sex: String
  size: String
  price: Int
  description: String
  origin: String
  generic: String
  image: Upload
  category: CategoryRelateToOneForCreateInput
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

type Category {
  id: ID!
  name: String
  description: String
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input CategoryUpdateInput {
  name: String
  description: String
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  description: String
}

type Article {
  id: ID!
  name: String
  content: String
  link: Article_link_Document
  image: CloudinaryImage_File
}

type Article_link_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ArticleWhereUniqueInput {
  id: ID
}

input ArticleWhereInput {
  AND: [ArticleWhereInput!]
  OR: [ArticleWhereInput!]
  NOT: [ArticleWhereInput!]
  id: IDFilter
  name: StringFilter
  content: StringFilter
}

input ArticleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  content: OrderDirection
}

input ArticleUpdateInput {
  name: String
  content: String
  link: JSON
  image: Upload
}

input ArticleUpdateArgs {
  where: ArticleWhereUniqueInput!
  data: ArticleUpdateInput!
}

input ArticleCreateInput {
  name: String
  content: String
  link: JSON
  image: Upload
}

type Feedback {
  id: ID!
  user: User
  product: Product
  comment: String
  createdAt: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input FeedbackWhereUniqueInput {
  id: ID
}

input FeedbackWhereInput {
  AND: [FeedbackWhereInput!]
  OR: [FeedbackWhereInput!]
  NOT: [FeedbackWhereInput!]
  id: IDFilter
  user: UserWhereInput
  product: ProductWhereInput
  comment: StringFilter
  createdAt: DateTimeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input FeedbackOrderByInput {
  id: OrderDirection
  comment: OrderDirection
  createdAt: OrderDirection
}

input FeedbackUpdateInput {
  user: UserRelateToOneForUpdateInput
  product: ProductRelateToOneForUpdateInput
  comment: String
  createdAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input FeedbackUpdateArgs {
  where: FeedbackWhereUniqueInput!
  data: FeedbackUpdateInput!
}

input FeedbackCreateInput {
  user: UserRelateToOneForCreateInput
  product: ProductRelateToOneForCreateInput
  comment: String
  createdAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type Order {
  id: ID!
  user: User
  items(where: OrderItemWhereInput! = {}, orderBy: [OrderItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderItemWhereUniqueInput): [OrderItem!]
  itemsCount(where: OrderItemWhereInput! = {}): Int
  price: Int
  createAt: DateTime
  address: String
  status: String
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  user: UserWhereInput
  items: OrderItemManyRelationFilter
  price: IntNullableFilter
  createAt: DateTimeNullableFilter
  address: StringFilter
  status: StringNullableFilter
}

input OrderItemManyRelationFilter {
  every: OrderItemWhereInput
  some: OrderItemWhereInput
  none: OrderItemWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input OrderOrderByInput {
  id: OrderDirection
  price: OrderDirection
  createAt: OrderDirection
  address: OrderDirection
  status: OrderDirection
}

input OrderUpdateInput {
  user: UserRelateToOneForUpdateInput
  items: OrderItemRelateToManyForUpdateInput
  price: Int
  createAt: DateTime
  address: String
  status: String
}

input OrderItemRelateToManyForUpdateInput {
  disconnect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  user: UserRelateToOneForCreateInput
  items: OrderItemRelateToManyForCreateInput
  price: Int
  createAt: DateTime
  address: String
  status: String
}

input OrderItemRelateToManyForCreateInput {
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

type OrderItem {
  id: ID!
  order: Order
  product: Product
  quantity: Int
  price: Int
  isStored: Boolean
}

input OrderItemWhereUniqueInput {
  id: ID
}

input OrderItemWhereInput {
  AND: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  NOT: [OrderItemWhereInput!]
  id: IDFilter
  order: OrderWhereInput
  product: ProductWhereInput
  quantity: IntFilter
  price: IntFilter
  isStored: BooleanFilter
}

input OrderItemOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
  price: OrderDirection
  isStored: OrderDirection
}

input OrderItemUpdateInput {
  order: OrderRelateToOneForUpdateInput
  product: ProductRelateToOneForUpdateInput
  quantity: Int
  price: Int
  isStored: Boolean
}

input OrderRelateToOneForUpdateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
}

input OrderItemUpdateArgs {
  where: OrderItemWhereUniqueInput!
  data: OrderItemUpdateInput!
}

input OrderItemCreateInput {
  order: OrderRelateToOneForCreateInput
  product: ProductRelateToOneForCreateInput
  quantity: Int
  price: Int
  isStored: Boolean
}

input OrderRelateToOneForCreateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
}

type CartItem {
  id: ID!
  user: User
  quantity: Int
  product(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productCount(where: ProductWhereInput! = {}): Int
}

input CartItemWhereUniqueInput {
  id: ID
}

input CartItemWhereInput {
  AND: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
  id: IDFilter
  user: UserWhereInput
  quantity: IntFilter
  product: ProductManyRelationFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input CartItemOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
}

input CartItemUpdateInput {
  user: UserRelateToOneForUpdateInput
  quantity: Int
  product: ProductRelateToManyForUpdateInput
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input CartItemUpdateArgs {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateInput!
}

input CartItemCreateInput {
  user: UserRelateToOneForCreateInput
  quantity: Int
  product: ProductRelateToManyForCreateInput
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type ConsigmentRaising {
  id: ID!
}

input ConsigmentRaisingWhereUniqueInput {
  id: ID
}

input ConsigmentRaisingWhereInput {
  AND: [ConsigmentRaisingWhereInput!]
  OR: [ConsigmentRaisingWhereInput!]
  NOT: [ConsigmentRaisingWhereInput!]
  id: IDFilter
}

input ConsigmentRaisingOrderByInput {
  id: OrderDirection
}

input ConsigmentRaisingUpdateArgs {
  where: ConsigmentRaisingWhereUniqueInput!
  data: Empty
}

scalar Empty

type ConsignmentSale {
  id: ID!
  name: String
  birth: Int
  sex: String
  medical: String
  size: Int
  price: Int
  description: String
  origin: String
  generic: String
  image: CloudinaryImage_File
  category: String
  status: String
}

input ConsignmentSaleWhereUniqueInput {
  id: ID
}

input ConsignmentSaleWhereInput {
  AND: [ConsignmentSaleWhereInput!]
  OR: [ConsignmentSaleWhereInput!]
  NOT: [ConsignmentSaleWhereInput!]
  id: IDFilter
  name: StringFilter
  birth: IntFilter
  sex: StringNullableFilter
  medical: StringFilter
  size: IntFilter
  price: IntFilter
  description: StringFilter
  origin: StringFilter
  generic: StringFilter
  category: StringFilter
  status: StringNullableFilter
}

input ConsignmentSaleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  birth: OrderDirection
  sex: OrderDirection
  medical: OrderDirection
  size: OrderDirection
  price: OrderDirection
  description: OrderDirection
  origin: OrderDirection
  generic: OrderDirection
  category: OrderDirection
  status: OrderDirection
}

input ConsignmentSaleUpdateInput {
  name: String
  birth: Int
  sex: String
  medical: String
  size: Int
  price: Int
  description: String
  origin: String
  generic: String
  image: Upload
  category: String
  status: String
}

input ConsignmentSaleUpdateArgs {
  where: ConsignmentSaleWhereUniqueInput!
  data: ConsignmentSaleUpdateInput!
}

input ConsignmentSaleCreateInput {
  name: String
  birth: Int
  sex: String
  medical: String
  size: Int
  price: Int
  description: String
  origin: String
  generic: String
  image: Upload
  category: String
  status: String
}

type Request {
  id: ID!
  user: User
  staff: User
  description: String
  consignment: ConsignmentSale
  status: String
  createAt: DateTime
}

input RequestWhereUniqueInput {
  id: ID
}

input RequestWhereInput {
  AND: [RequestWhereInput!]
  OR: [RequestWhereInput!]
  NOT: [RequestWhereInput!]
  id: IDFilter
  user: UserWhereInput
  staff: UserWhereInput
  description: StringFilter
  consignment: ConsignmentSaleWhereInput
  status: StringNullableFilter
  createAt: DateTimeNullableFilter
}

input RequestOrderByInput {
  id: OrderDirection
  description: OrderDirection
  status: OrderDirection
  createAt: OrderDirection
}

input RequestUpdateInput {
  user: UserRelateToOneForUpdateInput
  staff: UserRelateToOneForUpdateInput
  description: String
  consignment: ConsignmentSaleRelateToOneForUpdateInput
  status: String
  createAt: DateTime
}

input ConsignmentSaleRelateToOneForUpdateInput {
  create: ConsignmentSaleCreateInput
  connect: ConsignmentSaleWhereUniqueInput
  disconnect: Boolean
}

input RequestUpdateArgs {
  where: RequestWhereUniqueInput!
  data: RequestUpdateInput!
}

input RequestCreateInput {
  user: UserRelateToOneForCreateInput
  staff: UserRelateToOneForCreateInput
  description: String
  consignment: ConsignmentSaleRelateToOneForCreateInput
  status: String
  createAt: DateTime
}

input ConsignmentSaleRelateToOneForCreateInput {
  create: ConsignmentSaleCreateInput
  connect: ConsignmentSaleWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(where: ProductWhereUniqueInput!, data: ProductUpdateInput!): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createArticle(data: ArticleCreateInput!): Article
  createArticles(data: [ArticleCreateInput!]!): [Article]
  updateArticle(where: ArticleWhereUniqueInput!, data: ArticleUpdateInput!): Article
  updateArticles(data: [ArticleUpdateArgs!]!): [Article]
  deleteArticle(where: ArticleWhereUniqueInput!): Article
  deleteArticles(where: [ArticleWhereUniqueInput!]!): [Article]
  createFeedback(data: FeedbackCreateInput!): Feedback
  createFeedbacks(data: [FeedbackCreateInput!]!): [Feedback]
  updateFeedback(where: FeedbackWhereUniqueInput!, data: FeedbackUpdateInput!): Feedback
  updateFeedbacks(data: [FeedbackUpdateArgs!]!): [Feedback]
  deleteFeedback(where: FeedbackWhereUniqueInput!): Feedback
  deleteFeedbacks(where: [FeedbackWhereUniqueInput!]!): [Feedback]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createOrderItem(data: OrderItemCreateInput!): OrderItem
  createOrderItems(data: [OrderItemCreateInput!]!): [OrderItem]
  updateOrderItem(where: OrderItemWhereUniqueInput!, data: OrderItemUpdateInput!): OrderItem
  updateOrderItems(data: [OrderItemUpdateArgs!]!): [OrderItem]
  deleteOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  deleteOrderItems(where: [OrderItemWhereUniqueInput!]!): [OrderItem]
  createCartItem(data: CartItemCreateInput!): CartItem
  createCartItems(data: [CartItemCreateInput!]!): [CartItem]
  updateCartItem(where: CartItemWhereUniqueInput!, data: CartItemUpdateInput!): CartItem
  updateCartItems(data: [CartItemUpdateArgs!]!): [CartItem]
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteCartItems(where: [CartItemWhereUniqueInput!]!): [CartItem]
  createConsigmentRaising(data: Empty): ConsigmentRaising
  createConsigmentRaisings(data: [Empty]!): [ConsigmentRaising]
  updateConsigmentRaising(where: ConsigmentRaisingWhereUniqueInput!, data: Empty): ConsigmentRaising
  updateConsigmentRaisings(data: [ConsigmentRaisingUpdateArgs!]!): [ConsigmentRaising]
  deleteConsigmentRaising(where: ConsigmentRaisingWhereUniqueInput!): ConsigmentRaising
  deleteConsigmentRaisings(where: [ConsigmentRaisingWhereUniqueInput!]!): [ConsigmentRaising]
  createConsignmentSale(data: ConsignmentSaleCreateInput!): ConsignmentSale
  createConsignmentSales(data: [ConsignmentSaleCreateInput!]!): [ConsignmentSale]
  updateConsignmentSale(where: ConsignmentSaleWhereUniqueInput!, data: ConsignmentSaleUpdateInput!): ConsignmentSale
  updateConsignmentSales(data: [ConsignmentSaleUpdateArgs!]!): [ConsignmentSale]
  deleteConsignmentSale(where: ConsignmentSaleWhereUniqueInput!): ConsignmentSale
  deleteConsignmentSales(where: [ConsignmentSaleWhereUniqueInput!]!): [ConsignmentSale]
  createRequest(data: RequestCreateInput!): Request
  createRequests(data: [RequestCreateInput!]!): [Request]
  updateRequest(where: RequestWhereUniqueInput!, data: RequestUpdateInput!): Request
  updateRequests(data: [RequestUpdateArgs!]!): [Request]
  deleteRequest(where: RequestWhereUniqueInput!): Request
  deleteRequests(where: [RequestWhereUniqueInput!]!): [Request]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  createInvoice(items: [OrderItemCreateInput!]!, user: String!, price: Int!, address: String!): Order
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  phone: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  role(where: RoleWhereUniqueInput!): Role
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoleWhereUniqueInput): [Role!]
  rolesCount(where: RoleWhereInput! = {}): Int
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  article(where: ArticleWhereUniqueInput!): Article
  articles(where: ArticleWhereInput! = {}, orderBy: [ArticleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ArticleWhereUniqueInput): [Article!]
  articlesCount(where: ArticleWhereInput! = {}): Int
  feedback(where: FeedbackWhereUniqueInput!): Feedback
  feedbacks(where: FeedbackWhereInput! = {}, orderBy: [FeedbackOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FeedbackWhereUniqueInput): [Feedback!]
  feedbacksCount(where: FeedbackWhereInput! = {}): Int
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderWhereUniqueInput): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  orderItems(where: OrderItemWhereInput! = {}, orderBy: [OrderItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderItemWhereUniqueInput): [OrderItem!]
  orderItemsCount(where: OrderItemWhereInput! = {}): Int
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItems(where: CartItemWhereInput! = {}, orderBy: [CartItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CartItemWhereUniqueInput): [CartItem!]
  cartItemsCount(where: CartItemWhereInput! = {}): Int
  consigmentRaising(where: ConsigmentRaisingWhereUniqueInput!): ConsigmentRaising
  consigmentRaisings(where: ConsigmentRaisingWhereInput! = {}, orderBy: [ConsigmentRaisingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConsigmentRaisingWhereUniqueInput): [ConsigmentRaising!]
  consigmentRaisingsCount(where: ConsigmentRaisingWhereInput! = {}): Int
  consignmentSale(where: ConsignmentSaleWhereUniqueInput!): ConsignmentSale
  consignmentSales(where: ConsignmentSaleWhereInput! = {}, orderBy: [ConsignmentSaleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConsignmentSaleWhereUniqueInput): [ConsignmentSale!]
  consignmentSalesCount(where: ConsignmentSaleWhereInput! = {}): Int
  request(where: RequestWhereUniqueInput!): Request
  requests(where: RequestWhereInput! = {}, orderBy: [RequestOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RequestWhereUniqueInput): [Request!]
  requestsCount(where: RequestWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
