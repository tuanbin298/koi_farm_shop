import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import {
    Table, TableBody, TableCell, TableContainer, TableHead, TableRow,
    Paper, TextField, Box, Typography, Checkbox, Button, Grid
} from '@mui/material';
import { formatMoney } from '../../utils/formatMoney';
import { FaArrowLeft, FaShoppingCart } from "react-icons/fa";
import { Link } from "react-router-dom"
import { CREATE_CONSIGNMENT_RAISING } from '../api/Mutations/fishcare';
import { useQuery, useMutation } from "@apollo/client";
import toast, { Toaster } from "react-hot-toast";
const FishCareService = () => {
    const location = useLocation();  // L·∫•y danh s√°ch s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn t·ª´ CartPage
    const navigate = useNavigate();  // Chuy·ªÉn h∆∞·ªõng sang trang thanh to√°n
    const [selectedProducts, setSelectedProducts] = useState([]);
    const [totalCarePrice, setTotalCarePrice] = useState(0);
    const [agreeToPolicy, setAgreeToPolicy] = useState(false); // Khai b√°o agreeToPolicy
    const [dates, setDates] = useState({});
    const userId = localStorage.getItem("id");
    
    // L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ location.state
    useEffect(() => {
        if (location.state && location.state.selectedProducts) {
            setSelectedProducts(location.state.selectedProducts);
        }
    }, [location.state]);
    const [createConsignmentRaisings] = useMutation(CREATE_CONSIGNMENT_RAISING);
    // T√≠nh t·ªïng s·ªë ti·ªÅn k√Ω g·ª≠i d·ª±a tr√™n ng√†y b·∫Øt ƒë·∫ßu/k·∫øt th√∫c v√† gi√° k√Ω g·ª≠i nu√¥i
    const calculateTotalPrice = () => {
        let total = 0;
        selectedProducts.forEach((product) => {
            const pricePerDay = product.product[0]?.price || product.consignmentProduct[0]?.price;
            const { startDate, endDate } = dates[product.id] || {};
            if (startDate && endDate) {
                const days = Math.ceil((new Date(endDate) - new Date(startDate)) / (1000 * 60 * 60 * 24));
                total += days * 50000;
            }
        });
        setTotalCarePrice(total);
    };

    // C·∫≠p nh·∫≠t ng√†y b·∫Øt ƒë·∫ßu/k·∫øt th√∫c cho gi√° k√Ω g·ª≠i nu√¥i
    const handleDateChange = (productId, field, value) => {
        // Convert selected date to full ISO 8601 date-time string
        const isoDate = new Date(value).toISOString().split("T")[0]; // Outputs full format: YYYY-MM-DDTHH:mm:ss.sssZ
        console.log(isoDate);
        setDates((prevDates) => ({
            ...prevDates,
            [productId]: { ...prevDates[productId], [field]: isoDate },
        }));
    };
    // T√≠nh l·∫°i t·ªïng ti·ªÅn k√Ω g·ª≠i m·ªói khi ng√†y ƒë∆∞·ª£c thay ƒë·ªïi
    useEffect(() => {
        calculateTotalPrice();
    }, [dates]);

    // ƒêi·ªÅu h∆∞·ªõng sang trang thanh to√°n
    const handleProceedToCheckout = async () => {
        if (agreeToPolicy) {
            const consignmentData = selectedProducts.map((product) => {
                console.log(product.product[0].id);    
                const { startDate, endDate } = dates[product.id] || {};
                const pricePerDay = 50000;
                const days = startDate && endDate
                    ? Math.ceil((new Date(endDate) - new Date(startDate)) / (1000 * 60 * 60 * 24))
                    : 0;

                return {
                    user: { connect: { id: userId } },
                    product: { connect: { id: product.product[0].id } },
                    returnDate: new Date(endDate).toISOString(),
                    consignmentPrice: days * pricePerDay,
                    status: "ƒêang x·ª≠ l√Ω",
                    description: "Consignment for fish care"
                };
            });

            try {
                // Await the mutation execution
                await createConsignmentRaisings({
                    variables: { data: consignmentData },
                });

                // Show the toast and wait for it to display
                toast.success("K√Ω g·ª≠i nu√¥i th√†nh c√¥ng!", {
                    icon: "üéâ",
                    duration: 2000, // Set the duration as needed
                });

                // Delay navigation to allow the user to see the toast
                setTimeout(() => {
                    navigate('/checkout', { state: { totalCarePrice } });
                }, 2000); // Match this delay to the toast duration
            } catch (error) {
                console.error("Error creating consignment:", error);
                toast.error("K√Ω g·ª≠i nu√¥i kh√¥ng th√†nh c√¥ng!");
            }
            
        } else {
            alert('B·∫°n c·∫ßn ƒë·ªìng √Ω v·ªõi ch√≠nh s√°ch k√Ω g·ª≠i tr∆∞·ªõc khi ti·∫øp t·ª•c.');
        }
    };

    return (
        <div className="web-container">
            <div style={{ padding: '20px' }}>

                <section className="back-button-section">
                    <div className="icon-container">
                        <FaArrowLeft className="icon" />
                    </div>
                    <span className="back-button-text">
                        <Link to="/cart">Quay l·∫°i gi·ªè h√†ng</Link>
                    </span>
                </section>

                <Typography variant="h4" gutterBottom>
                    D·ªãch V·ª• K√Ω G·ª≠i Nu√¥i C√°
                </Typography>

                {/* B·∫£ng th√¥ng tin k√Ω g·ª≠i */}
                <TableContainer component={Paper} style={{ marginTop: '20px' }}>
                    <Table>
                        <TableHead>
                            <TableRow>
                                <TableCell style={{ fontWeight: 'bold', textAlign: 'center' }}>T√™n C√°</TableCell>
                                <TableCell style={{ fontWeight: 'bold', textAlign: 'center' }}>Ng√†y B·∫Øt ƒê·∫ßu</TableCell>
                                <TableCell style={{ fontWeight: 'bold', textAlign: 'center' }}>Ng√†y K·∫øt Th√∫c</TableCell>
                                <TableCell style={{ fontWeight: 'bold', textAlign: 'center' }}>Gi√° Ti·ªÅn K√Ω G·ª≠i (VND)</TableCell> {/* C·∫≠p nh·∫≠t ƒë√¢y */}
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {selectedProducts.map((product) => (
                                <TableRow key={product.id}>
                                    <TableCell align="center">
                                        {product.product.length > 0
                                            ? product.product[0].name
                                            : product.consignmentProduct[0]?.name}
                                    </TableCell>
                                    <TableCell align="center">
                                        <TextField
                                            type="date"
                                            value={dates[product.id]?.startDate || ''}
                                            onChange={(e) => handleDateChange(product.id, 'startDate', e.target.value)}
                                            InputLabelProps={{ shrink: true }}
                                        />
                                    </TableCell>
                                    <TableCell align="center">
                                        <TextField
                                            type="date"
                                            value={dates[product.id]?.endDate || ''}
                                            onChange={(e) => handleDateChange(product.id, 'endDate', e.target.value)}
                                            InputLabelProps={{ shrink: true }}
                                        />
                                    </TableCell>
                                    <TableCell align="center">
                                        {(() => {
                                            const pricePerDay = 50000; // Gi√° k√Ω g·ª≠i 50.000 VND/ng√†y
                                            const { startDate, endDate } = dates[product.id] || {};
                                            let totalDeposit = 0;

                                            // T√≠nh ti·ªÅn k√Ω g·ª≠i theo ng√†y n·∫øu c√≥ ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
                                            if (startDate && endDate) {
                                                const days = Math.ceil((new Date(endDate) - new Date(startDate)) / (1000 * 60 * 60 * 24));
                                                totalDeposit = days * pricePerDay; // T√≠nh t·ªïng ti·ªÅn k√Ω g·ª≠i
                                            }

                                            return formatMoney(totalDeposit); // Tr·∫£ v·ªÅ gi√° k√Ω g·ª≠i ƒë√£ t√≠nh
                                        })()}
                                    </TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </TableContainer>


                {/* T·ªïng ti·ªÅn k√Ω g·ª≠i */}
                <Box display="flex" justifyContent="flex-end" marginTop={2}>
                    <Typography variant="h6" gutterBottom>
                        T·ªïng ti·ªÅn k√Ω g·ª≠i: {formatMoney(totalCarePrice)}
                    </Typography>
                </Box>

                {/* Ch√≠nh s√°ch k√Ω g·ª≠i */}
                <Box marginTop={4}>
                    <Typography variant="h4" gutterBottom>
                        Ch√≠nh S√°ch K√Ω G·ª≠i ChƒÉm S√≥c C√° Koi
                    </Typography>
                    <Typography variant="body1" paragraph>
                        <strong>Th·ªùi gian k√Ω g·ª≠i:</strong> <br />
                        - Th·ªùi gian t·ªëi thi·ªÉu k√Ω g·ª≠i: 7 ng√†y<br />
                        - Th·ªùi gian t·ªëi ƒëa k√Ω g·ª≠i: 6 th√°ng. Sau th·ªùi gian n√†y, kh√°ch h√†ng c√≥ th·ªÉ gia h·∫°n n·∫øu c·∫ßn thi·∫øt.<br />
                        - Kh√°ch h√†ng ph·∫£i th√¥ng b√°o tr∆∞·ªõc 3 ng√†y n·∫øu mu·ªën gia h·∫°n ho·∫∑c k·∫øt th√∫c h·ª£p ƒë·ªìng s·ªõm h∆°n th·ªùi h·∫°n ƒë√£ cam k·∫øt.
                    </Typography>
                    <Typography variant="body1" paragraph>
                        <strong>Chi ph√≠ k√Ω g·ª≠i:</strong><br />
                        - Ph√≠ k√Ω g·ª≠i: 50.000 VND/ng√†y cho m·ªói con c√° Koi, kh√¥ng ph√¢n bi·ªát k√≠ch th∆∞·ªõc l·ªõn hay nh·ªè.<br />
                        - Ph√≠ d·ªãch v·ª• b·ªï sung: C√°c d·ªãch v·ª• chƒÉm s√≥c s·ª©c kh·ªèe ho·∫∑c th·ª©c ƒÉn ƒë·∫∑c bi·ªát s·∫Ω c√≥ chi ph√≠ ph√°t sinh theo y√™u c·∫ßu.
                    </Typography>
                    <Typography variant="body1" paragraph>
                        <strong>ChƒÉm s√≥c v√† b·∫£o v·ªá c√° Koi:</strong><br />
                        - Ch·∫ø ƒë·ªô dinh d∆∞·ª°ng: C√° ƒë∆∞·ª£c cho ƒÉn theo giai ƒëo·∫°n ph√°t tri·ªÉn v√† t√¨nh tr·∫°ng s·ª©c kh·ªèe.<br />
                        - M√¥i tr∆∞·ªùng s·ªëng: B·ªÉ nu√¥i s·∫Ω ƒë∆∞·ª£c l√†m s·∫°ch th∆∞·ªùng xuy√™n, ƒë·∫£m b·∫£o n∆∞·ªõc lu√¥n trong s·∫°ch.
                    </Typography>
                    <Typography variant="body1" paragraph>
                        <strong>Quy·ªÅn l·ª£i v√† tr√°ch nhi·ªám c·ªßa kh√°ch h√†ng:</strong><br />
                        <strong>Quy·ªÅn l·ª£i:</strong> Kh√°ch h√†ng c√≥ th·ªÉ thƒÉm c√° b·∫•t k·ª≥ l√∫c n√†o trong gi·ªù h√†nh ch√≠nh, v√† s·∫Ω nh·∫≠n b√°o c√°o t√¨nh tr·∫°ng s·ª©c kh·ªèe c·ªßa c√° ƒë·ªãnh k·ª≥.<br />
                        <strong>Tr√°ch nhi·ªám:</strong> Kh√°ch h√†ng c·∫ßn thanh to√°n ƒë√∫ng h·∫°n c√°c kho·∫£n ph√≠ k√Ω g·ª≠i v√† d·ªãch v·ª• b·ªï sung (n·∫øu c√≥).
                    </Typography>

                    {/* Checkbox ƒê·ªìng √ù Ch√≠nh S√°ch */}
                    <Grid container alignItems="center" marginTop={2}>
                        <Grid item>
                            <Checkbox
                                checked={agreeToPolicy}
                                onChange={(e) => setAgreeToPolicy(e.target.checked)}
                            />
                        </Grid>
                        <Grid item>
                            <Typography variant="body1">
                                T√¥i ƒë·ªìng √Ω v·ªõi ch√≠nh s√°ch k√Ω g·ª≠i
                            </Typography>
                        </Grid>
                    </Grid>
                </Box>

                {/* N√∫t Ti·∫øp T·ª•c Thanh To√°n */}
                <Box display="flex" justifyContent="flex-end" marginTop={2}>
                    <Button
                        variant="contained"
                        color="primary"
                        onClick={handleProceedToCheckout}
                    >
                        Ti·∫øn h√†nh thanh to√°n
                    </Button>
                </Box>
            </div>
        </div>
    );
};

export default FishCareService;
